tract_dataset_with_company_info <- tract_data_with_company_name %>%
group_by(GEOID, year) %>%
summarize(aggregate_EBITDA = sum(Yearly_EBITDA_million, na.rm=TRUE),
aggregate_past_EBITDA = sum(PreviousYearEBITDA, na.rm=TRUE),
EBITDA_growth = ((aggregate_EBITDA-aggregate_past_EBITDA)/aggregate_past_EBITDA)) %>%
ungroup() %>%
filter(!is.na(year))
## This line of code is changing the value for meanEPS when it has no input (from NaN to NA), weird, it gives 2009 EBITDA lagged values
tract_dataset_with_company_info$EBITDA_growth[is.nan(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.infinite(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.na(tract_dataset_with_company_info$EBITDA_growth)] = 0
tract_dataset_with_company_info$year = as.numeric(tract_dataset_with_company_info$year)
## Assigning growth rate with growth segment
tract_dataset_with_company_info <- tract_dataset_with_company_info  %>%
mutate(segment = case_when(
EBITDA_growth >= 0.5 ~ "High Growth",
EBITDA_growth >= 0.2 & EBITDA_growth < 0.5 ~ "Medium Growth",
EBITDA_growth > 0 & EBITDA_growth < 0.2 ~ "Low Growth",
EBITDA_growth <= 0 ~ "Low Growth",
TRUE ~ as.character(EBITDA_growth)
))
## Create a distinct list of segment corresponding to which GEOID and year to merge with the larger data
county_growth_assignment <- tract_dataset_with_company_info %>%
select(GEOID, segment, year) %>%
distinct() %>%
arrange(GEOID) %>%
st_drop_geometry()
longitudinal_data <- left_join(bay_area_data_2009_2019_acs5_data, county_growth_assignment, by = c("GEOID","year"))
longitudinal_data$county <- strsplit(longitudinal_data$NAME, ',') %>% sapply(.,function(v) trimws(v[2]))
longitudinal_data$segment[is.na(longitudinal_data$segment)] = "Control"
# Visualization for overall plot pre-GEE (have to include)
average_median_housing_value <- longitudinal_data %>%
st_drop_geometry() %>%
group_by(year, segment) %>%
summarise(avg_median_house_value = mean(HouseValueE/100000, na.rm = TRUE))
average_median_housing_value %>%
ggplot(aes(x=year, y=avg_median_house_value, color = segment)) +
geom_line() +
geom_vline(aes(xintercept = 2014), linetype = "dotted", color = "black", size = 0.5)+
theme_classic()+
labs(title= "Median House Price for Different Growth Segments between 2009 and 2019", x = "Year", y = "Median House Price (in $100K)", color = "Growth Segment")+
scale_color_viridis_d(alpha = 1)
correlation_chart <- longitudinal_data %>%
select(HouseValueE, IncomeE, PopE, AgeE, HouseholdSizeE, NumHouseE, `BirthPlace_Foreign born:`, `BirthPlace_Born in state of res`, Industry_Whole, Industry_Infor, Industry_Finan, Industry_Profe, Industry_Other,`Race_White alone`, `Race_Black or African American`, AREA) %>%
st_drop_geometry() %>%
cor(.,use='complete.obs')
# median_house_value_by_county <- longitudinal_data %>% group_by(county, year) %>% summarise(med_house_price = median(HouseValueE, na.rm = TRUE))
# install.packages('geeM')
library(geeM)
# GEE model
gee_mod <- longitudinal_data %>%
st_drop_geometry() %>%
drop_na(HouseValueE, year, segment, HouseholdSizeE, IncomeE, `BirthPlace_Born in state of res`, `Race_White alone`, county) %>%
mutate(outcome = HouseValueE/100000,
IncomeE = IncomeE/10000) %>% # in hundreds of thousands
geem(outcome ~ year*I(year > 2014)*segment + HouseholdSizeE + IncomeE + `BirthPlace_Born in state of res`+ `Race_White alone`+ county, data = ., id = GEOID, corstr = 'ar1') # AR1 working correlation
p1 <- bay_area_data_2009_2019_acs5_data %>%
filter(!is.na(HouseValueE)) %>%
ggplot() +
geom_sf(aes(fill = HouseValueE, group=year), size = 0, alpha = 0) +
scale_fill_viridis_c() +
scale_size(range = c(2, 12)) +
labs(title = 'Year: {floor(frame_time)}', subtitle = 'Median House Prices across the Silicon Valley and Neighboring Areas') +
theme_void() +
transition_time(year)
animate(p1, duration = 20)
help(resid)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warnings=FALSE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf) #install.packages('sf')
library(spdep) #install.packages('spdep')
library(patchwork)
library(viridis)
library(tidycensus)
library(tidygeocoder)
library(dplyr)
library(googlesheets4)
library(readr)
library(tidyr)
library(gganimate)
library(gifski)
library(transformr)
# Load company data
sf_companies_long <- read_csv("sf_companies.csv")
# Load bay area data from 2009 to 2019
load('CapstoneData.RData')
# Animation
p1 <- bay_area_data_2009_2019_acs5_data %>%
filter(!is.na(HouseValueE)) %>%
ggplot() +
geom_sf(aes(fill = HouseValueE, group=year), size = 0, alpha = 0) +
scale_fill_viridis_c() +
scale_size(range = c(2, 12)) +
labs(title = 'Year: {floor(frame_time)}', subtitle = 'Median House Prices across the Silicon Valley and Neighboring Areas') +
theme_void() +
transition_time(year)
animate(p1, duration = 20)
anim_save("house_price_animation.gif")
# Filter years before 2020
sf_companies_long <- sf_companies_long %>%
filter(year < 2020) # keep data from 2009 to 2019
sf_companies_with_coordinates <- sf_companies_long %>%
geocode(Address)
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
# sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
## Calculating growth for companies by EBITDA
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
View(sf_companies_growth)
tract_dataset <- bay_area_data_2009_2019_acs5_data %>% filter(year == 2019) %>% select(GEOID, geometry)
View(tract_dataset)
## Find total change % in EBITDA per census tract
### Join the companies and the census tracts that lie within the companies' 2000m radius
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, units::set_units(2, km)))
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
# sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
## Calculating growth for companies by EBITDA
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
tract_dataset <- bay_area_data_2009_2019_acs5_data %>% filter(year == 2019) %>% select(GEOID, geometry)
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
st_crs(bay_area_data_2009_2019_acs5_data)
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
st_crs(sf_companies_reshape)
st_crs(bay_area_data_2009_2019_acs5_data)
# sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
st_crs(sf_companies_reshape)
st_crs(bay_area_data_2009_2019_acs5_data)
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
# sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
## Calculating growth for companies by EBITDA
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
tract_dataset <- bay_area_data_2009_2019_acs5_data %>% filter(year == 2019) %>% select(GEOID, geometry)
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
tract_data_with_company_name
ggplot(data = tract_dataset) +
geom_sf()
View(sf_companies_reshape)
View(sf_companies_with_coordinates)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE) +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.5, label = labs))
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 4,
shape = 23, fill = "darkred") +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE) +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.5, label = Name))
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 4,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.5, label = Name))
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 1,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.5, label = Name), size=2)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 1,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.01, label = Name), size=2)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 1,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=2)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 1,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=5)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 1,
shape = 23, fill = "darkred") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=4)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 3,
shape = 23, fill = "darkred")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude") + theme_classic()
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf(fill = "white") +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf(fill = "pink") +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf(fill = "white") +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf(fill = "lightgrey") +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude", title="Top 13 tech companies in the Bay Area")
View(sf_companies_reshape)
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warnings=FALSE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf) #install.packages('sf')
library(spdep) #install.packages('spdep')
library(patchwork)
library(viridis)
library(tidycensus)
library(tidygeocoder)
library(dplyr)
library(googlesheets4)
library(readr)
library(tidyr)
library(gganimate)
library(gifski)
library(transformr)
# Load company data
sf_companies_long <- read_csv("sf_companies.csv")
# Load bay area data from 2009 to 2019
load('CapstoneData.RData')
# Animation
p1 <- bay_area_data_2009_2019_acs5_data %>%
filter(!is.na(HouseValueE)) %>%
ggplot() +
geom_sf(aes(fill = HouseValueE, group=year), size = 0, alpha = 0) +
scale_fill_viridis_c() +
scale_size(range = c(2, 12)) +
labs(title = 'Year: {floor(frame_time)}', subtitle = 'Median House Prices across the Silicon Valley and Neighboring Areas') +
theme_void() +
transition_time(year)
animate(p1, duration = 20)
anim_save("house_price_animation.gif")
# Filter years before 2020
sf_companies_long <- sf_companies_long %>%
filter(year < 2020) # keep data from 2009 to 2019
sf_companies_with_coordinates <- sf_companies_long %>%
geocode(Address)
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
# sf_companies_reshape <- st_transform(sf_companies_reshape, st_crs(bay_area_data_2009_2019_acs5_data))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
## Calculating growth for companies by EBITDA
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
tract_dataset <- bay_area_data_2009_2019_acs5_data %>% filter(year == 2019) %>% select(GEOID, geometry)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude", title="Top 13 tech companies in the Bay Area")
# +
# geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=4)
## Find total change % in EBITDA per census tract
### Join the companies and the census tracts that lie within the companies' 2000m radius
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
## Only keep the census tracts that have any intersection with the companies
tract_dataset_with_company_info <- tract_data_with_company_name %>%
group_by(GEOID, year) %>%
summarize(aggregate_EBITDA = sum(Yearly_EBITDA_million, na.rm=TRUE),
aggregate_past_EBITDA = sum(PreviousYearEBITDA, na.rm=TRUE),
EBITDA_growth = ((aggregate_EBITDA-aggregate_past_EBITDA)/aggregate_past_EBITDA)) %>%
ungroup() %>%
filter(!is.na(year))
## This line of code is changing the value for meanEPS when it has no input (from NaN to NA), weird, it gives 2009 EBITDA lagged values
tract_dataset_with_company_info$EBITDA_growth[is.nan(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.infinite(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.na(tract_dataset_with_company_info$EBITDA_growth)] = 0
tract_dataset_with_company_info$year = as.numeric(tract_dataset_with_company_info$year)
## Assigning growth rate with growth segment
tract_dataset_with_company_info <- tract_dataset_with_company_info  %>%
mutate(segment = case_when(
EBITDA_growth >= 0.5 ~ "High Growth",
EBITDA_growth >= 0.2 & EBITDA_growth < 0.5 ~ "Medium Growth",
EBITDA_growth > 0 & EBITDA_growth < 0.2 ~ "Low Growth",
EBITDA_growth <= 0 ~ "Low Growth",
TRUE ~ as.character(EBITDA_growth)
))
## Create a distinct list of segment corresponding to which GEOID and year to merge with the larger data
county_growth_assignment <- tract_dataset_with_company_info %>%
select(GEOID, segment, year) %>%
distinct() %>%
arrange(GEOID) %>%
st_drop_geometry()
longitudinal_data <- left_join(bay_area_data_2009_2019_acs5_data, county_growth_assignment, by = c("GEOID","year"))
longitudinal_data$county <- strsplit(longitudinal_data$NAME, ',') %>% sapply(.,function(v) trimws(v[2]))
longitudinal_data$segment[is.na(longitudinal_data$segment)] = "Control"
# Visualization for overall plot pre-GEE (have to include)
average_median_housing_value <- longitudinal_data %>%
st_drop_geometry() %>%
group_by(year, segment) %>%
summarise(avg_median_house_value = mean(HouseValueE/100000, na.rm = TRUE))
average_median_housing_value %>%
ggplot(aes(x=year, y=avg_median_house_value, color = segment)) +
geom_line() +
geom_vline(aes(xintercept = 2014), linetype = "dotted", color = "black", size = 0.5)+
theme_classic()+
labs(title= "Median House Price for Different Growth Segments between 2009 and 2019", x = "Year", y = "Median House Price (in $100K)", color = "Growth Segment")+
scale_color_viridis_d(alpha = 1)
correlation_chart <- longitudinal_data %>%
select(HouseValueE, IncomeE, PopE, AgeE, HouseholdSizeE, NumHouseE, `BirthPlace_Foreign born:`, `BirthPlace_Born in state of res`, Industry_Whole, Industry_Infor, Industry_Finan, Industry_Profe, Industry_Other,`Race_White alone`, `Race_Black or African American`, AREA) %>%
st_drop_geometry() %>%
cor(.,use='complete.obs')
# median_house_value_by_county <- longitudinal_data %>% group_by(county, year) %>% summarise(med_house_price = median(HouseValueE, na.rm = TRUE))
# install.packages('geeM')
library(geeM)
# GEE model
gee_mod <- longitudinal_data %>%
st_drop_geometry() %>%
drop_na(HouseValueE, year, segment, HouseholdSizeE, IncomeE, `BirthPlace_Born in state of res`, `Race_White alone`, county) %>%
mutate(outcome = HouseValueE/100000,
IncomeE = IncomeE/10000) %>% # in hundreds of thousands
geem(outcome ~ year*I(year > 2014)*segment + HouseholdSizeE + IncomeE + `BirthPlace_Born in state of res`+ `Race_White alone`+ county, data = ., id = GEOID, corstr = 'ar1') # AR1 working correlation
library(dagitty)
dag <- dagitty("
dag {
bb=\"0,0,1,1\"
A [exposure,pos=\"0.300,0.500\"]
W [pos=\"0.550,0.280\"]
Y [outcome,pos=\"0.600,0.500\"]
Z [pos=\"0.350,0.280\"]
A -> Y
W -> A
W -> Y
Z -> A
Z -> Y
}
")
plot(dag)
library(dagitty)
dag <- dagitty("
dag {
bb=\"0,0,1,1\"
A [exposure,pos=\"0.300,0.500\"]
W [pos=\"0.550,0.280\"]
Y [outcome,pos=\"0.600,0.500\"]
Z [pos=\"0.350,0.280\"]
A -> Y
W -> A
W -> Y
Z -> A
Z -> Y
}
")
plot(dag)
set.seed(451)
n <- 10000
Z <- rbinom(n, size = 1, prob = 0.5)
W <- rbinom(n, size = 1, prob = 0.5)
log_odds_A <- -1 + 0.4*Z + 0.4*W + 0.9*Z*W
odds_A <- exp(log_odds_A)
p_A <- odds_A/(1+odds_A)
A <- rbinom(n, size = 1, prob=p_A)
noise_Y <- rnorm(n, mean = 0, sd=2)
mean_Y <- 10 + 5*A + 6*Z + 7*W
Y <- mean_Y + noise_Y
sim_data <- data.frame(Z = factor(Z), W = factor(W), A = factor(A), Y)
set.seed(451)
n <- 10000
Z <- rbinom(n, size = 1, prob = 0.5)
W <- rbinom(n, size = 1, prob = 0.5)
log_odds_A <- -1 + 0.4*Z + 0.4*W + 0.9*Z*W
odds_A <- exp(log_odds_A)
p_A <- odds_A/(1+odds_A)
A <- rbinom(n, size = 1, prob=p_A)
noise_Y <- rnorm(n, mean = 0, sd=2)
mean_Y <- 10 + 5*A + 6*Z + 7*W
Y <- mean_Y + noise_Y
sim_data <- data.frame(Z = factor(Z), W = factor(W), A = factor(A), Y)
ps_mod_simple <- glm(A ~ Z + W, data = sim_data, family = "binomial")
ps_mod_simple
ps_mod_simple <- glm(A ~ Z + W, data = sim_data, family = "binomial")
ps_mod_complex <- glm(A ~ Z + W + Z*W, data = sim_data, family = "binomial")
ps_mod_simple <- glm(A ~ Z + W, data = sim_data, family = "binomial")
ps_mod_complex <- glm(A ~ Z + W + Z*W, data = sim_data, family = "binomial")
summary(ps_mod_simple)
summary(ps_mod_complex)
sim_data <- sim_data %>%
mutate(
ps_simple = predict(ps_mod_simple, newdata = sim_data, type = "response"),
ipw_simple = case_when(
A==1 ~ 1/ps_simple,
A==0 ~ 1/(1-ps_simple)
)
) %>%
mutate(
ps_complex = predict(ps_mod_complex, newdata = sim_data, type = "response"),
ipw_complex = case_when(
A==1 ~ 1/ps_complex,
A==0 ~ 1/(1-ps_complex)
)
)
lm(Y ~ A, data = sim_data)
lm(Y ~ A, data = sim_data, weights = ipw_simple)
lm(Y ~ A, data = sim_data, weights = ipw_complex)
ipw_simple
lm(Y ~ A, data = sim_data, weights = ipw_simple)
lm(Y ~ A, data = sim_data, weights = ipw_complex)
View(sim_data)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude", title="Top 13 tech companies in the Bay Area") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=4)
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude", title="Top 13 tech companies in the Bay Area") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.1, label = Name), size=2)
ggplot(sim_data, aes(x = Z, y = A)) +
geom_point() +
geom_smooth(se = FALSE, color = "blue") +
geom_smooth(formula = y ~ x, method = "glm",
method.args = list(family="binomial"),
se = FALSE, color = "red"
) +
theme_classic()
ggplot(sim_data, aes(x = Z, y = A)) +
geom_point() +
geom_smooth(se = FALSE, color = "blue") +
geom_smooth(formula = y ~ x, method = "glm",
method.args = list(family="binomial"),
se = FALSE, color = "red"
) +
theme_classic()
ggplot(sim_data, aes(x = Z, fill = A)) +
geom_bar(position = "fill")
ggplot(data = tract_dataset) +
geom_sf() +
geom_point(data = sf_companies_with_coordinates, aes(x = long, y = lat), size = 2,
shape = 23, fill = "darkred") +
labs(x="Longitude", y="Latitude", title="Top 13 tech companies in the Bay Area") +
geom_text(data = sf_companies_with_coordinates, aes(x = long, y = lat + 0.05, label = Name), size=2)
ps_mod_simple <- glm(A ~ Z + W, data = sim_data, family = "binomial")
ps_mod_complex <- glm(A ~ Z*W + Z*W, data = sim_data, family = "binomial")
summary(ps_mod_simple)
summary(ps_mod_complex)
ps_mod_complex <- glm(A ~ Z*W, data = sim_data, family = "binomial")
ps_mod_simple <- glm(A ~ Z + W, data = sim_data, family = "binomial")
ps_mod_complex <- glm(A ~ Z*W, data = sim_data, family = "binomial")
summary(ps_mod_simple)
summary(ps_mod_complex)
ggplot(sim_data, aes(x = Z, fill = A)) +
geom_bar(position = "fill")
ggplot(sim_data, aes(x = W, fill = A)) +
geom_bar(position = "fill")
ggplot(sim_data, aes(x = Z, fill = A, weight = ipw_complex)) +
geom_bar(position = "fill")
ggplot(sim_data, aes(x = Z, fill = A, weight = ipw_complex)) +
geom_bar(position = "fill")
ggplot(sim_data, aes(x = W, fill = A, weight = ipw_complex)) +
geom_bar(position = "fill")
