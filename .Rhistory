labs(fill = "Grade Difference in Grade Cohort Standardized Achievement Score from NAEP standard", color = "", title = "Grade Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=breaks_qt_grade$brks)))
ggplot() +
geom_sf(data=grade_diff_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Grade Difference in Grade Cohort Standardized Achievement Score from NAEP standard", color = "", title = "Grade Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
grade_diff_by_county_geo <- ca_counties %>%
left_join(grade_diff_by_county, by="NAMELSAD")
breaks_qt_grade <- classIntervals(c(min(grade_diff_by_county_geo$mean_gcs_diff) - .00001, grade_diff_by_county_geo$mean_gcs_diff), n = 5, style = "quantile")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=breaks_qt_grade$brks)))
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Grade Difference in Grade Cohort Standardized Achievement Score from NAEP standard", color = "", title = "Grade Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Grade Difference in Grade Cohort Standardized Achievement Score from NAEP standard", color = "", title = "Grade Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference from NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \n from NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \nfrom NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
breaks_qt_grade <- classIntervals(c(min(grade_diff_by_county_geo$mean_gcs_diff) - .00001, grade_diff_by_county_geo$mean_gcs_diff), n = 3, style = "quantile")
grade_diff_by_county_geo <- ca_counties %>%
left_join(grade_diff_by_county, by="NAMELSAD")
breaks_qt_grade <- classIntervals(c(min(grade_diff_by_county_geo$mean_gcs_diff) - .00001, grade_diff_by_county_geo$mean_gcs_diff), n = 3, style = "quantile")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=breaks_qt_grade$brks)))
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \nfrom NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
grade_diff_by_county_geo <- ca_counties %>%
left_join(grade_diff_by_county, by="NAMELSAD")
breaks_qt_grade <- classIntervals(c(min(grade_diff_by_county_geo$mean_gcs_diff) - .00001, grade_diff_by_county_geo$mean_gcs_diff), n = 4, style = "quantile")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=breaks_qt_grade$brks)))
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \nfrom NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \nfrom NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard by \nCalifornia County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
ggplot() +
geom_sf(data=grade_diff_by_county_with_breaks_geo, aes(fill=grade_diff_cat)) +
scale_fill_viridis_d() +
labs(fill = "Achievement Score Difference \nfrom NAEP standard", color = "", title = "Grade Cohort Standardized Achievement Score Difference from NAEP standard \nby California County", subtitle= "according to the Educational Opportunity Project at Stanford University") +
theme_map() +
theme(legend.position = "right")
View(merged_table)
colnames(merged_table)
# Exploring counties and cities in CA by making a choropleth map
ggplot() +
geom_sf(data = ca_counties, fill = 'wheat', color = "tan") + #establishing my counties basemap
geom_sf(data = school_map_sf, mapping = aes(color = diff_from_gradecenter), alpha = 0.8)+ #cities layer
scale_color_viridis_c() + #continuous (gradient) color scale
labs(title = "Grade Cohort Standardized Scores across California counties") +
theme_map() +
theme(legend.position = "bottom")  #move legend
library(dplyr)
library(tidyr)
library(neuralnet) # install.packages(neuralnet)
install.packages("neuralnet")
library(dplyr)
library(tidyr)
library(neuralnet) # install.packages(neuralnet)
library(tidyverse)
# Step 1:
all_data <- read.csv('https://raw.githubusercontent.com/JeremyHub/STAT-456-Final/main/Jeremy/train.csv') # characteristics of homes sold in an Iowa town between 2006 and 2010. Compiled specifically for use in data science education.
# Step 2:
train <- all_data[,sapply(all_data, is.numeric)] %>%
sapply(function(x) (x - min(x)) / (max(x) - min(x))) %>% # applies the function to perform min-max scaling
as.data.frame() %>%
select(-LotFrontage,-MasVnrArea,-GarageYrBlt) %>%
na.omit()
sample_size = 500
picked = sample(seq_len(nrow(train)),size = sample_size)
train =train[picked,]
test =train[-picked,]
model = neuralnet(SalePrice ~ LotArea + OverallQual,
data=train,
hidden=c(4,2),
linear.output = TRUE
)
plot(model,rep = "best")
knitr::opts_chunk$set(echo = FALSE)
lower(XYE)
lowercase(XYE)
tolower(XXXXXXX)
```{r}
tolower('XXXXXXX')
#' Provides information on the marginal/conditional (in)dependence of the three key causal structures: chain, fork, and collider
#'
#' This function takes a string, either 'chain', 'fork', or 'collider' and returns a paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
#'
#' @param structure A string input, either 'chain', 'fork', or 'collider'
#' @return A paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
check_key_structure_independence <- function(structure) {
if (tolower(structure) == 'chain') {
return("In a chain X → Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically:
- X and Y are marginally dependent.
- Y and Z are marginally dependent.
- X and Z are marginally dependent.
However, when keeping the intermediate variable constant (i.e. Y in the relationship X → Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'fork') {
return("In a fork X ← Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically:
- X and Y are marginally dependent.
- Y and Z are marginally dependent.
- X and Z are marginally dependent.
However, when keeping the common parent constant (i.e. Y in the relationship X ← Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'collider') {
return("In a collider X → Y ← Z, marginal independence holds for the parentless variables X and Z, while the common child variable Y is marginally dependent on each of the parent variable X and Z. Specifically:
- X and Y are marginally dependent.
- Y and Z are marginally dependent.
- X and Z are marginally independent.
When the child variable Y is kept constant, X and Z are conditionally dependent.")
} else {
return("Incorrect input. Please input a string specifying one in three options: 'chain', 'fork', or 'collider'")
}
}
check_key_structure_independence('chain')
#' Provides information on the marginal/conditional (in)dependence of the three key causal structures: chain, fork, and collider
#'
#' This function takes a string, either 'chain', 'fork', or 'collider' and returns a paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
#'
#' @param structure A string input, either 'chain', 'fork', or 'collider'
#' @return A paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
check_key_structure_independence <- function(structure) {
if (tolower(structure) == 'chain') {
return("In a chain X → Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the intermediate variable constant (i.e. Y in the relationship X → Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'fork') {
return("In a fork X ← Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the common parent constant (i.e. Y in the relationship X ← Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'collider') {
return("In a collider X → Y ← Z, marginal independence holds for the parentless variables X and Z, while the common child variable Y is marginally dependent on each of the parent variable X and Z. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally independent. When the child variable Y is kept constant, X and Z are conditionally dependent.")
} else {
return("Incorrect input. Please input a string specifying one in three options: 'chain', 'fork', or 'collider'")
}
}
check_key_structure_independence('chain')
check_key_structure_independence("spork")
check_key_structure_independence("fork")
check_key_structure_independence("collider")
#' Provides information on the marginal/conditional (in)dependence of the three key causal structures: chain, fork, and collider
#'
#' This function takes a string, either 'chain', 'fork', or 'collider' and returns a paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
#'
#' @param structure A string input, either 'chain', 'fork', or 'collider'
#' @return A paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
check_key_structure_independence <- function(structure) {
if (tolower(structure) == 'chain') {
return("In a chain X → Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the intermediate variable constant (i.e. Y in the relationship X → Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'fork' | tolower(structure) == 'spork') {
return("In a fork X ← Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the common parent constant (i.e. Y in the relationship X ← Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'collider') {
return("In a collider X → Y ← Z, marginal independence holds for the parentless variables X and Z, while the common child variable Y is marginally dependent on each of the parent variable X and Z. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally independent. When the child variable Y is kept constant, X and Z are conditionally dependent.")
} else {
return("Incorrect input. Please input a string specifying one in three options: 'chain', 'fork', or 'collider'")
}
}
check_key_structure_independence("spork")
#' Provides information on the marginal/conditional (in)dependence of the three key causal structures: chain, fork, and collider
#'
#' This function takes a string, either 'chain', 'fork', or 'collider' and returns a paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
#'
#' @param structure A string input, either 'chain', 'fork', or 'collider'
#' @return A paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
check_key_structure_independence <- function(structure) {
if (tolower(structure) == 'chain') {
return("In a chain X → Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the intermediate variable constant (i.e. Y in the relationship X → Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'fork') {
return("In a fork X ← Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the common parent constant (i.e. Y in the relationship X ← Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else if (tolower(structure) == 'collider') {
return("In a collider X → Y ← Z, marginal independence holds for the parentless variables X and Z, while the common child variable Y is marginally dependent on each of the parent variable X and Z. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally independent. When the child variable Y is kept constant, X and Z are conditionally dependent.")
} else if (tolower(structure) == 'spork') {
return("You mean fork????!!!! In a fork X ← Y → Z, marginal dependence holds for every pair of variables in a chain causal graph without controlling for other variables. Specifically: (1) X and Y are marginally dependent. (2) Y and Z are marginally dependent. (3) X and Z are marginally dependent. However, when keeping the common parent constant (i.e. Y in the relationship X ← Y → Z), then X and Z are conditionally independent due to no changes in Y.")
} else {
return("Incorrect input. Please input a string specifying one in three options: 'chain', 'fork', or 'collider'")
}
}
check_key_structure_independence("spork")
check_key_structure_independence("fork")
check_key_structure_independence("knife")
check_key_structure_independence("spork")
set.seed(451)
n <- 10000
X <- rnorm(n, mean = 30, sd = 3)
Y <- rnorm(n, mean = 5 + X, sd = 3)
Z <- rnorm(n, mean = 5 + Y, sd = 3)
sim_data <- data.frame(X, Y, Z)
lm(X ~ Z+Y, data = sim_data) %>% summary()
check_key_structure_independence("spork")
#' Provides information on the marginal/conditional (in)dependence of the three key causal structures: chain, fork, and collider
#'
#' This function takes a string, either 'chain', 'fork', or 'collider' and returns a paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
#'
#' @param structure A string input, either 'chain', 'fork', or 'collider'
#' @return A paragraph on how the three variables in each structure are marginally/conditionally (in)dependent from one another
simple_3_numeric_var_simulation <- function(X, Y, Z, n) {
set.seed(451)
sim_data <- data.frame(X, Y, Z)
lm(X ~ Z+Y, data = sim_data) %>% summary()
}
X <- rnorm(n, mean = 30, sd = 3) #Simulate numeric x
Y <- rnorm(n, mean = 5 + X, sd = 3) #Simulate numeric y
Z <- rnorm(n, mean = 5 + Y, sd = 3) #Simulate numeric z
simple_3_numeric_var_simulation(X, Y, Z, n=10000)
# Repeat simulations 100 times. (Reduce sample size to 1000.)
sim_results_chain <- replicate(100, simulate_chain(n = 1000), simplify = FALSE)
X <- rnorm(n, mean = 30, sd = 3) #Simulate numeric x
Y <- rnorm(n, mean = 5 + X, sd = 3) #Simulate numeric y
Z <- rnorm(n, mean = 5 + Y, sd = 3) #Simulate numeric z
simple_3_numeric_var_simulation(X, Y, Z, n=10000)
set.seed(451)
simulate_chain <- function(n) {
X <- rnorm(n, mean = 30, sd = 3)
Y <- rnorm(n, mean = 5 + X, sd = 3)
Z <- rnorm(n, mean = 5 + Y, sd = 3)
sim_data <- data.frame(X, Y, Z)
mod1 <- lm(Y ~ X, data = sim_data) # X and Y marg. dep.
mod2 <- lm(Y ~ Z, data = sim_data) # Z and Y marg. dep.
mod3 <- lm(Z ~ X, data = sim_data) # X and Z marg. dep.
mod4 <- lm(Z ~ X+Y, data = sim_data) # X and Z cond. indep. given Y
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
data.frame(
pval = c(pval1, pval2, pval3, pval4),
descrip = c("X and Y marg. dep.", "Z and Y marg. dep.", "X and Z marg. dep.", "X and Z cond. indep. given Y")
)
}
# Repeat simulations 100 times. (Reduce sample size to 1000.)
sim_results_chain <- replicate(100, simulate_chain(n = 1000), simplify = FALSE)
View(sim_results_chain)
sim_results_chain <- bind_rows(sim_results_chain)
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = mean(pval < 0.05))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = count(pval < 0.05))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = n())
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = mean(pval))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = mean(pval < 1))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = mean(pval < 0.001))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = mean(pval < 0.05))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = n(pval < 0.05))
sim_results_chain %>%
group_by(descrip) %>%
summarize(frac_signif_pval = pval < 0.05)
library(tidyverse)
library(readxl)
library(MetBrewer)
library(sf)
library(rnaturalearth)
school_data <- read.csv('ca_education.csv') # dataset of public K-12 spending by school
school_data_clean <- school_data %>%
filter(flag_nerds == 'false') %>%
filter(flag_f33 != '1')
ela_metric_data <- read.csv('ca_edu_metrics.csv') # 2022 Academic Indicator (English Language Arts/Literacy) Data File
ela_metric_data_clean <- ela_metric_data %>%
filter(cds > 0, rtype == 'S') %>% # school record
select(-color, -box) %>%
mutate(cds_standardized = as.character(paste0("0", cds)))
colnames(ela_metric_data_clean) <- paste0("ela_data_", colnames(ela_metric_data_clean))
valuecols<-names(ela_metric_data_clean)[10:21]
ela_wide <- ela_metric_data_clean %>% pivot_wider(names_from = ela_data_studentgroup, values_from = valuecols, names_sep = "_") %>% mutate(ela_data_cds = as.character(ela_data_cds))
ela_mth_proficiency_ranges<-read.csv("nathanieldata.csv") %>% filter(GRADE == "00" & CATEGORY == "ALL") %>% mutate(NCESSCH = as.character(NCESSCH), NCESSCH = paste0("0",NCESSCH))
science_metric_data <- read.csv('science_ca_assesment.csv', sep = "^")
science_metrics_clean <- science_metric_data %>%
mutate(cds = as.character(paste0(0, paste0(paste0(County.Code,District.Code),paste0(0,School.Code))))) %>% # add cds identifier
# mutate(cds_standardized = ifelse(nchar(cds) == 13, as.character(paste0(0,cds)), cds)) %>% # there are school codes missing the last 0, this fixes that to match other cds
filter(County.Code > 0, Type.ID == 07) %>%
select(-County.Code, -District.Code, -School.Code, -Filler)
valuecols <- c(names(science_metrics_clean)[8:25],names(science_metrics_clean)[4:5])
science_metrics_wide <- science_metrics_clean %>% pivot_wider(names_from = Grade, values_from = valuecols)
colnames(science_metrics_wide) <- paste0("science_data_", colnames(science_metrics_wide))
colnames(science_metrics_clean) <- paste0("science_data_", colnames(science_metrics_clean))
stanford_data <- read.csv('seda_school_pool_gcs_4.1.csv')
stanford_cov <- read.csv("seda_cov_school_pool_4.1.csv")
stanford_cov <- stanford_cov %>% filter(stateabb == "CA")
stanford_data_clean <- stanford_data %>%
filter(stateabb == 'CA') %>%
select(sedasch, sedaschname, fips, stateabb, subcat, subgroup, gradecenter, gap, contains("avg"), -ends_with("se")) %>%
mutate(standardized_school_id = paste0("0", sedasch)) %>% # adding 0 in front of school id to match the format of the school dataset
left_join(stanford_cov)
ca_school_details <- read_excel("ca_school_details.xlsx") # CA schools metadata
ca_school_details_clean <- ca_school_details %>%
filter(StatusType == "Active") %>%
filter(School != "No Data") %>%
mutate(school_id = paste0(NCESDist, NCESSchool))
wide_merged_data <- ca_school_details_clean %>%
left_join(school_data_clean, by=c('school_id'='ncesid')) %>%
left_join(science_metrics_wide, by = c("CDSCode"="science_data_cds")) %>%
left_join(ela_wide, by = c("CDSCode"="ela_data_cds_standardized")) %>%
left_join(stanford_data_clean, by=c('school_id'='standardized_school_id')) %>%
mutate(ncesid = paste0(NCESDist,NCESSchool)) %>%
left_join(ela_mth_proficiency_ranges, by=c("ncesid"="NCESSCH"))
save(wide_merged_data, file="wide_merged_data.RData")
names(wide_merged_data)
wide_merged_data <- ca_school_details_clean %>%
left_join(school_data_clean, by=c('school_id'='ncesid')) %>%
left_join(science_metrics_wide, by = c("CDSCode"="science_data_cds")) %>%
left_join(ela_wide, by = c("CDSCode"="ela_data_cds_standardized")) %>%
left_join(stanford_data_clean, by=c('school_id'='standardized_school_id')) %>%
mutate(ncesid = paste0(NCESDist,NCESSchool)) %>%
left_join(ela_mth_proficiency_ranges, by=c("ncesid"="NCESSCH"))
save(wide_merged_data, file="wide_merged_data.RData")
names(wide_merged_data)
load("wide_merged_data.RData")
library(tidyverse)
library(MetBrewer)
library(sf)
library(rnaturalearth)
library(ggplot2)
load("CombinedDataLongFormat.RData")
load("wide_merged_data.RData")
library(tidyverse)
library(MetBrewer)
library(sf)
library(rnaturalearth)
library(classInt) #install.packages('classInt')
library(ggspatial) #install.packages('ggspatial')
library(ggthemes) #install.packages('ggthemes')
library(RColorBrewer)
library(patchwork)
library(leaflet)
library(probably) #install.packages('probably')
library(glmnet)
library(tidymodels)
tidymodels_prefer()
palname = "Homer2"
defaultcolor = met.brewer(palname,10)[9]
load("CombinedDataLongFormat.RData")
load("WideMergedData.RData")
math_ca_gcs_df <- read_csv("AllDatasets/math_ca_gcs_df.csv")
rla_ca_gcs_df <- read_csv("AllDatasets/rla_ca_gcs_df.csv")
ca_counties <- read_sf('CA_Counties')
ca_counties <- ca_counties %>%
st_transform(crs = "NAD83")
school_map <- merged_table %>%
select(CDSCode, School, gradecenter, gcs_mn_avg_ol, Longitude, Latitude) %>%
filter(!is.na(gradecenter) & !is.na(gcs_mn_avg_ol)) %>% #7390 after NA gradecenter, 6997 after both conditions
distinct %>%
mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter) %>%
mutate(gcs_type = ifelse(diff_from_gradecenter < 0, "Below NAEP Average", ifelse(diff_from_gradecenter > 0, "Above NAEP Average", "At NAEP Average")))
school_map_sf <- school_map %>%
st_as_sf(coords = c('Longitude', 'Latitude'), crs = "NAD83")
school_county_sf <- st_join(school_map_sf, ca_counties)
grade_diff_by_county <- school_county_sf %>%
st_drop_geometry() %>% #removes geometry - makes calculation more efficient
group_by(NAMELSAD) %>%
summarise(mean_gcs_diff = mean(diff_from_gradecenter))
grade_diff_by_county_geo <- ca_counties %>%
left_join(grade_diff_by_county, by="NAMELSAD")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-2, -1, 0, 1, 2))))
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "County",
popup = ~paste0(NAMELSAD,
"<br>Grade Distance from National Average: ", round(mean_gcs_diff, digits = 3))
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "County",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 years behind', 'Less than 1 year behind', 'Less than 1 year ahead'), className = "info legend County")
summary_math_data <- ca_counties %>%
left_join(math_ca_gcs_df, by=c("NAMELSAD" = "sedacountyname")) %>%
filter(student_category %in% c('ecd','nec')) %>%
filter(!is.na(gcs_value) & !is.na(student_category)) %>%
select(NAMELSAD, grade, year, gcs_value, student_category, clean_student_category) %>%
mutate(gcs_diff = gcs_value - grade) %>%
st_drop_geometry() %>%
group_by(NAMELSAD, student_category, clean_student_category) %>%
summarise(mean_gcs_diff = mean(gcs_diff)) %>%
ungroup()
summary_math_data_with_geo <- ca_counties %>%
select(NAMELSAD) %>%
left_join(summary_math_data, by="NAMELSAD")
summary_math_data_with_geo <- summary_math_data_with_geo %>%
mutate(mean_gcs_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-3, -2, -1, 0, 1, 2, 3))))
summary_rla_data <- ca_counties %>%
left_join(rla_ca_gcs_df, by=c("NAMELSAD" = "sedacountyname")) %>%
filter(student_category %in% c('ecd','nec')) %>%
filter(!is.na(gcs_value) & !is.na(student_category)) %>%
select(NAMELSAD, grade, year, gcs_value, student_category, clean_student_category) %>%
mutate(gcs_diff = gcs_value - grade) %>%
st_drop_geometry() %>%
group_by(NAMELSAD, student_category, clean_student_category) %>%
summarise(mean_gcs_diff = mean(gcs_diff)) %>%
ungroup()
summary_rla_data_with_geo <- ca_counties %>%
select(NAMELSAD) %>%
left_join(summary_rla_data, by="NAMELSAD")
summary_rla_data_with_geo <- summary_rla_data_with_geo %>%
mutate(mean_gcs_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-3, -2, -1, 0, 1, 2, 3))))
pal <- colorFactor(
palette = met.brewer(palname,6)[1:6],
domain = summary_math_data$mean_gcs_diff_cat
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "County",
position = "topright"
) %>%
addPolygons(
data = summary_math_data_with_geo %>% filter(student_category == 'ecd'),
fillColor = ~pal(mean_gcs_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Math: Economically Disadvantaged",
popup = ~paste0(NAMELSAD,
"<br>Grade Distance from National Average: ", round(mean_gcs_diff, digits = 3)
)
)  %>%
addPolygons(
data = summary_math_data_with_geo %>% filter(student_category == 'nec'),
fillColor = ~pal(mean_gcs_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Math: Non-Economically Disadvantaged",
popup = ~paste0(NAMELSAD,
"<br>Grade Distance from National Average: ", round(mean_gcs_diff, digits = 3)
)
)  %>%
addPolygons(
data = summary_rla_data_with_geo %>% filter(student_category == 'ecd'),
fillColor = ~pal(mean_gcs_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "RLA: Economically Disadvantaged",
popup = ~paste0(NAMELSAD,
"<br>Grade Distance from National Average: ", round(mean_gcs_diff, digits = 3)
)
)  %>%
addPolygons(
data = summary_rla_data_with_geo %>% filter(student_category == 'nec'),
fillColor = ~pal(mean_gcs_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "RLA: Non-Economically Disadvantaged",
popup = ~paste0(NAMELSAD,
"<br>Grade Distance from National Average: ", round(mean_gcs_diff, digits = 3)
)
)  %>%
addLayersControl(baseGroups = c("Math: Economically Disadvantaged", "Math: Non-Economically Disadvantaged", "RLA: Economically Disadvantaged", "RLA: Non-Economically Disadvantaged"),
position = "bottomleft", options = layersControlOptions(collapsed = FALSE)) %>%
addLegend(colors = met.brewer(palname,6)[1:6], values = ~mean_gcs_diff_cat, title = NULL, labels = c('2+ years behind','1-2 years behind', 'Less than 1 year behind', 'Less than 1 year ahead', '1-2 years ahead', '2+ years ahead'), group = "Economically Disadvantaged")
quarto::render()
quarto:render()
