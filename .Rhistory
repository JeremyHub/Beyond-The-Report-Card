mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
}
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
result_df = data.frame(
description = c("Check if X and Y are marginally dependent", "Check if Z and Y are marginally dependent", "Check if X and Z are marginally dependent", "Check if X and Z are conditionally independent given Y"),
model_pval = c(pval1, pval2, pval3, pval4),
pval_interpretation = c(ifelse(pval1 <= 0.05, 'The two variables are dependent', 'The two variables are independent'), ifelse(pval2 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval3 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval4 <= 0.05, 'The two variables are dependent', 'The two variables are independent'))
)
return(result_df)
}
simple_chain_simulation(10000, TRUE, TRUE, TRUE)
set.seed(451)
combos <- tidyr::crossing(
x_numeric = c(FALSE, TRUE),
y_numeric = c(FALSE, TRUE),
z_numeric = c(FALSE, TRUE)
)
for (i in seq_len(nrow(combos))) {
print(combos[i,])
res <- simple_chain_simulation(10000, x_numeric = combos$x_numeric[i], y_numeric = combos$y_numeric[i], z_numeric = combos$z_numeric[i])
print(res)
}
#' Simulates Z values that are dependent on Y values in a chain. This function is used within the set_y_and_z_in_chain(n, y_numeric, z_numeric, X) function.
#'
#' @param n The number of observations of Z for a single simulation
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param Y The values of Y in the big function to generate Z values that are dependent on Y values
#' @return Simulated Z values
set_z_in_chain <- function(n, z_numeric, Y) {
if (z_numeric) {
# Simulate numeric z
Z <- rnorm(n, mean = 1 + 5*Y, sd = 1)
} else {
# Simulate binary z
coeff <- ifelse(length(unique(Y)) > 2, 0.05, 1)
log_odds_Z <- -1 + coeff*Y
odds_Z <- exp(log_odds_Z)
p_Z <- odds_Z/(1+odds_Z)
Z <- rbinom(n, size = 1, prob = p_Z)
Z <- factor(Z)
}
return(Z)
}
#' Simulates Y and Z values where Y values are dependent on X values for a chain. This function is used within the simple_chain_simulation(n, x_numeric, y_numeric, z_numeric).
#'
#' @param n The number of observations of Z for a single simulation
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param X The values of X in the big function to generate Y values that are dependent on X values
#' @return A list containing simulated Y and Z values
set_y_and_z_in_chain <- function(n, y_numeric, z_numeric, X) {
if (y_numeric) {
# Simulate numeric y
Y <- rnorm(n, mean = 1 + 5*X, sd = 1)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
} else {
# Simulate binary y
coeff <- ifelse(length(unique(X)) > 2, 0.04, 1)
log_odds_Y <- -1 + coeff*X
odds_Y <- exp(log_odds_Y)
p_Y <- odds_Y/(1+odds_Y)
Y <- rbinom(n, size = 1, prob = p_Y)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
Y <- factor(Y)
}
result_list = list(Y_values=Y, Z_values=Z)
return(result_list)
}
#' Simulates the dependency structure of a basic chain, with 3 variables X, Y, Z, where X → Y → Z
#'
#' This function takes the number of observations of X, Y, Z for a single simulation. It also requires the user to specify whether they want X, Y, or Z to be numeric or binary
#'
#' @param n The number of observations of X, Y, Z for a single simulation
#' @param x_numeric TRUE for numeric X and FALSE for binary X
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @return A dataframe of the 4 tests performed (Check if X and Y are marginally dependent, Check if Z and Y are marginally dependent, Check if X and Z are marginally dependent, Check if X and Z are conditionally independent given Y), the model p-values corresponding to the tests, and the interpretation of the result.
#' Example:
#' # Results in a chain simulation with 10000 simulated observations of X, Y, Z, with X and Y being numeric and Z being binary.
#' set.seed(451)
#' simple_chain_simulation(10000, x_numeric = TRUE, y_numeric = TRUE, z_numeric = FALSE)
simple_chain_simulation <- function(n, x_numeric, y_numeric, z_numeric) {
# Variable configuration
if (x_numeric) {
# Simulate numeric x
X <- rnorm(n, mean = 30, sd = 3)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y
Z <- Y_and_Z$Z
} else {
# Simulate binary x
X <- rbinom(n, size = 1, prob = 0.6)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y_values
Z <- Y_and_Z$Z_values
X <- factor(X)
}
sim_data <- data.frame(X, Y, Z)
# View(sim_data)
# return(sim_data)
if (y_numeric) {
if (z_numeric) {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
} else {
if (z_numeric) {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
}
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
result_df = data.frame(
description = c("Check if X and Y are marginally dependent", "Check if Z and Y are marginally dependent", "Check if X and Z are marginally dependent", "Check if X and Z are conditionally independent given Y"),
model_pval = c(pval1, pval2, pval3, pval4),
pval_interpretation = c(ifelse(pval1 <= 0.05, 'The two variables are dependent', 'The two variables are independent'), ifelse(pval2 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval3 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval4 <= 0.05, 'The two variables are dependent', 'The two variables are independent'))
)
return(result_df)
}
simple_chain_simulation(10000, TRUE, TRUE, TRUE)
simple_chain_simulation(10000, FALSE, FALSE, TRUE)
#' Simulates Z values that are dependent on Y values in a chain. This function is used within the set_y_and_z_in_chain(n, y_numeric, z_numeric, X) function.
#'
#' @param n The number of observations of Z for a single simulation
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param Y The values of Y in the big function to generate Z values that are dependent on Y values
#' @return Simulated Z values
set_z_in_chain <- function(n, z_numeric, Y) {
if (z_numeric) {
# Simulate numeric z
Z <- rnorm(n, mean = 1 + 5*Y, sd = 1)
} else {
# Simulate binary z
coeff <- ifelse(length(unique(Y)) > 2, 0.05, 1)
log_odds_Z <- -1 + coeff*Y
odds_Z <- exp(log_odds_Z)
p_Z <- odds_Z/(1+odds_Z)
Z <- rbinom(n, size = 1, prob = p_Z)
Z <- factor(Z)
}
return(Z)
}
#' Simulates Y and Z values where Y values are dependent on X values for a chain. This function is used within the simple_chain_simulation(n, x_numeric, y_numeric, z_numeric).
#'
#' @param n The number of observations of Z for a single simulation
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param X The values of X in the big function to generate Y values that are dependent on X values
#' @return A list containing simulated Y and Z values
set_y_and_z_in_chain <- function(n, y_numeric, z_numeric, X) {
if (y_numeric) {
# Simulate numeric y
Y <- rnorm(n, mean = 1 + 5*X, sd = 1)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
} else {
# Simulate binary y
coeff <- ifelse(length(unique(X)) > 2, 0.02, 1)
log_odds_Y <- -1 + coeff*X
odds_Y <- exp(log_odds_Y)
p_Y <- odds_Y/(1+odds_Y)
Y <- rbinom(n, size = 1, prob = p_Y)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
Y <- factor(Y)
}
result_list = list(Y_values=Y, Z_values=Z)
return(result_list)
}
#' Simulates the dependency structure of a basic chain, with 3 variables X, Y, Z, where X → Y → Z
#'
#' This function takes the number of observations of X, Y, Z for a single simulation. It also requires the user to specify whether they want X, Y, or Z to be numeric or binary
#'
#' @param n The number of observations of X, Y, Z for a single simulation
#' @param x_numeric TRUE for numeric X and FALSE for binary X
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @return A dataframe of the 4 tests performed (Check if X and Y are marginally dependent, Check if Z and Y are marginally dependent, Check if X and Z are marginally dependent, Check if X and Z are conditionally independent given Y), the model p-values corresponding to the tests, and the interpretation of the result.
#' Example:
#' # Results in a chain simulation with 10000 simulated observations of X, Y, Z, with X and Y being numeric and Z being binary.
#' set.seed(451)
#' simple_chain_simulation(10000, x_numeric = TRUE, y_numeric = TRUE, z_numeric = FALSE)
simple_chain_simulation <- function(n, x_numeric, y_numeric, z_numeric) {
# Variable configuration
if (x_numeric) {
# Simulate numeric x
X <- rnorm(n, mean = 30, sd = 3)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y
Z <- Y_and_Z$Z
} else {
# Simulate binary x
X <- rbinom(n, size = 1, prob = 0.6)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y_values
Z <- Y_and_Z$Z_values
X <- factor(X)
}
sim_data <- data.frame(X, Y, Z)
# View(sim_data)
# return(sim_data)
if (y_numeric) {
if (z_numeric) {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
} else {
if (z_numeric) {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
}
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
result_df = data.frame(
description = c("Check if X and Y are marginally dependent", "Check if Z and Y are marginally dependent", "Check if X and Z are marginally dependent", "Check if X and Z are conditionally independent given Y"),
model_pval = c(pval1, pval2, pval3, pval4),
pval_interpretation = c(ifelse(pval1 <= 0.05, 'The two variables are dependent', 'The two variables are independent'), ifelse(pval2 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval3 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval4 <= 0.05, 'The two variables are dependent', 'The two variables are independent'))
)
return(result_df)
}
simple_chain_simulation(10000, FALSE, FALSE, TRUE)
#' Simulates Z values that are dependent on Y values in a chain. This function is used within the set_y_and_z_in_chain(n, y_numeric, z_numeric, X) function.
#'
#' @param n The number of observations of Z for a single simulation
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param Y The values of Y in the big function to generate Z values that are dependent on Y values
#' @return Simulated Z values
set_z_in_chain <- function(n, z_numeric, Y) {
if (z_numeric) {
# Simulate numeric z
Z <- rnorm(n, mean = 1 + 5*Y, sd = 1)
} else {
# Simulate binary z
coeff <- ifelse(length(unique(Y)) > 2, 0.05, 1)
log_odds_Z <- -1 + coeff*Y
odds_Z <- exp(log_odds_Z)
p_Z <- odds_Z/(1+odds_Z)
Z <- rbinom(n, size = 1, prob = p_Z)
Z <- factor(Z)
}
return(Z)
}
#' Simulates Y and Z values where Y values are dependent on X values for a chain. This function is used within the simple_chain_simulation(n, x_numeric, y_numeric, z_numeric).
#'
#' @param n The number of observations of Z for a single simulation
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param X The values of X in the big function to generate Y values that are dependent on X values
#' @return A list containing simulated Y and Z values
set_y_and_z_in_chain <- function(n, y_numeric, z_numeric, X) {
if (y_numeric) {
# Simulate numeric y
Y <- rnorm(n, mean = 1 + 5*X, sd = 1)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
} else {
# Simulate binary y
coeff <- ifelse(length(unique(X)) > 2, 0.05, 1)
log_odds_Y <- -1.5 + coeff*X
odds_Y <- exp(log_odds_Y)
p_Y <- odds_Y/(1+odds_Y)
Y <- rbinom(n, size = 1, prob = p_Y)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
Y <- factor(Y)
}
result_list = list(Y_values=Y, Z_values=Z)
return(result_list)
}
#' Simulates the dependency structure of a basic chain, with 3 variables X, Y, Z, where X → Y → Z
#'
#' This function takes the number of observations of X, Y, Z for a single simulation. It also requires the user to specify whether they want X, Y, or Z to be numeric or binary
#'
#' @param n The number of observations of X, Y, Z for a single simulation
#' @param x_numeric TRUE for numeric X and FALSE for binary X
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @return A dataframe of the 4 tests performed (Check if X and Y are marginally dependent, Check if Z and Y are marginally dependent, Check if X and Z are marginally dependent, Check if X and Z are conditionally independent given Y), the model p-values corresponding to the tests, and the interpretation of the result.
#' Example:
#' # Results in a chain simulation with 10000 simulated observations of X, Y, Z, with X and Y being numeric and Z being binary.
#' set.seed(451)
#' simple_chain_simulation(10000, x_numeric = TRUE, y_numeric = TRUE, z_numeric = FALSE)
simple_chain_simulation <- function(n, x_numeric, y_numeric, z_numeric) {
# Variable configuration
if (x_numeric) {
# Simulate numeric x
X <- rnorm(n, mean = 30, sd = 3)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y
Z <- Y_and_Z$Z
} else {
# Simulate binary x
X <- rbinom(n, size = 1, prob = 0.6)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y_values
Z <- Y_and_Z$Z_values
X <- factor(X)
}
sim_data <- data.frame(X, Y, Z)
# View(sim_data)
# return(sim_data)
if (y_numeric) {
if (z_numeric) {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
} else {
if (z_numeric) {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
}
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
result_df = data.frame(
description = c("Check if X and Y are marginally dependent", "Check if Z and Y are marginally dependent", "Check if X and Z are marginally dependent", "Check if X and Z are conditionally independent given Y"),
model_pval = c(pval1, pval2, pval3, pval4),
pval_interpretation = c(ifelse(pval1 <= 0.05, 'The two variables are dependent', 'The two variables are independent'), ifelse(pval2 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval3 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval4 <= 0.05, 'The two variables are dependent', 'The two variables are independent'))
)
return(result_df)
}
simple_chain_simulation(10000, FALSE, FALSE, TRUE)
#' Simulates Z values that are dependent on Y values in a chain. This function is used within the set_y_and_z_in_chain(n, y_numeric, z_numeric, X) function.
#'
#' @param n The number of observations of Z for a single simulation
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param Y The values of Y in the big function to generate Z values that are dependent on Y values
#' @return Simulated Z values
set_z_in_chain <- function(n, z_numeric, Y) {
if (z_numeric) {
# Simulate numeric z
Z <- rnorm(n, mean = 1 + 5*Y, sd = 1)
} else {
# Simulate binary z
coeff <- ifelse(length(unique(Y)) > 2, 0.05, 1)
log_odds_Z <- -1 + coeff*Y
odds_Z <- exp(log_odds_Z)
p_Z <- odds_Z/(1+odds_Z)
Z <- rbinom(n, size = 1, prob = p_Z)
Z <- factor(Z)
}
return(Z)
}
#' Simulates Y and Z values where Y values are dependent on X values for a chain. This function is used within the simple_chain_simulation(n, x_numeric, y_numeric, z_numeric).
#'
#' @param n The number of observations of Z for a single simulation
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @param X The values of X in the big function to generate Y values that are dependent on X values
#' @return A list containing simulated Y and Z values
set_y_and_z_in_chain <- function(n, y_numeric, z_numeric, X) {
if (y_numeric) {
# Simulate numeric y
Y <- rnorm(n, mean = 1 + 5*X, sd = 1)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
} else {
# Simulate binary y
coeff <- ifelse(length(unique(X)) > 2, 0.05, 1)
log_odds_Y <- -2 + coeff*X
odds_Y <- exp(log_odds_Y)
p_Y <- odds_Y/(1+odds_Y)
Y <- rbinom(n, size = 1, prob = p_Y)
# Set z
Z <- set_z_in_chain(n, z_numeric, Y)
Y <- factor(Y)
}
result_list = list(Y_values=Y, Z_values=Z)
return(result_list)
}
#' Simulates the dependency structure of a basic chain, with 3 variables X, Y, Z, where X → Y → Z
#'
#' This function takes the number of observations of X, Y, Z for a single simulation. It also requires the user to specify whether they want X, Y, or Z to be numeric or binary
#'
#' @param n The number of observations of X, Y, Z for a single simulation
#' @param x_numeric TRUE for numeric X and FALSE for binary X
#' @param y_numeric TRUE for numeric Y and FALSE for binary Y
#' @param z_numeric TRUE for numeric Z and FALSE for binary Z
#' @return A dataframe of the 4 tests performed (Check if X and Y are marginally dependent, Check if Z and Y are marginally dependent, Check if X and Z are marginally dependent, Check if X and Z are conditionally independent given Y), the model p-values corresponding to the tests, and the interpretation of the result.
#' Example:
#' # Results in a chain simulation with 10000 simulated observations of X, Y, Z, with X and Y being numeric and Z being binary.
#' set.seed(451)
#' simple_chain_simulation(10000, x_numeric = TRUE, y_numeric = TRUE, z_numeric = FALSE)
simple_chain_simulation <- function(n, x_numeric, y_numeric, z_numeric) {
# Variable configuration
if (x_numeric) {
# Simulate numeric x
X <- rnorm(n, mean = 30, sd = 3)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y
Z <- Y_and_Z$Z
} else {
# Simulate binary x
X <- rbinom(n, size = 1, prob = 0.6)
Y_and_Z <- set_y_and_z_in_chain(n, y_numeric, z_numeric, X)
Y <- Y_and_Z$Y_values
Z <- Y_and_Z$Z_values
X <- factor(X)
}
sim_data <- data.frame(X, Y, Z)
# View(sim_data)
# return(sim_data)
if (y_numeric) {
if (z_numeric) {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- lm(Y ~ X, data = sim_data) # Check if X and Y are marginally dependent
mod2 <- lm(Y ~ Z, data = sim_data) # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
} else {
if (z_numeric) {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- lm(Z ~ X, data = sim_data) # Check if X and Z are marginally dependent
mod4 <- lm(Z ~ X+Y, data = sim_data) # Check if X and Z are conditionally independent given Y
} else {
mod1 <- glm(Y ~ X, data = sim_data, family = "binomial") # Check if X and Y are marginally dependent
mod2 <- glm(Y ~ Z, data = sim_data, family = "binomial") # Check if Z and Y are marginally dependent
mod3 <- glm(Z ~ X, data = sim_data, family = "binomial") # Check if X and Z are marginally dependent
mod4 <- glm(Z ~ X+Y, data = sim_data, family = "binomial") # Check if X and Z are conditionally independent given Y
}
}
# Extract p-values
pval1 <- broom::tidy(mod1)$p.value[2] # The [2] extracts the 2nd p-value in the output table
pval2 <- broom::tidy(mod2)$p.value[2]
pval3 <- broom::tidy(mod3)$p.value[2]
pval4 <- broom::tidy(mod4)$p.value[2]
# Put into a data frame
result_df = data.frame(
description = c("Check if X and Y are marginally dependent", "Check if Z and Y are marginally dependent", "Check if X and Z are marginally dependent", "Check if X and Z are conditionally independent given Y"),
model_pval = c(pval1, pval2, pval3, pval4),
pval_interpretation = c(ifelse(pval1 <= 0.05, 'The two variables are dependent', 'The two variables are independent'), ifelse(pval2 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval3 <= 0.05,  'The two variables are dependent', 'The two variables are independent'), ifelse(pval4 <= 0.05, 'The two variables are dependent', 'The two variables are independent'))
)
return(result_df)
}
simple_chain_simulation(10000, FALSE, FALSE, TRUE)
?simulate_many
