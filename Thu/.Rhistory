knitr::opts_chunk$set(echo = FALSE, message=FALSE, warnings=FALSE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf) #install.packages('sf')
library(spdep) #install.packages('spdep')
library(patchwork)
library(viridis)
library(MetBrewer)
library(tidycensus)
library(tidygeocoder)
library(dplyr)
# library(googlesheets4)
library(readr)
library(tidyr)
library(gganimate)
library(gifski)
library(transformr)
hs_directory <- read.csv("~/Documents/GitHub/STAT-456-Final/Thu/hs_directory.csv", header=FALSE)
View(hs_directory)
hs_directory <- read.csv("~/Documents/GitHub/STAT-456-Final/Thu/hs_directory.csv")
View(hs_directory)
# Load High School Data
hs_directory <- read_csv('hs_directory.csv')
View(hs_directory)
hs_directory %>% mutate(coordinate = str_split(location, "\\(", 2))
hs_directory <- hs_directory %>% mutate(coordinate = str_split(location, "\\(", 2))
View(hs_directory)
hs_directory %>% select(coordinate)
hs_directory %>% select(coordinate) %>% unnest(cols = everything())
str_split(hs_directory$location, "\\("))
str_split(hs_directory$location, "\\(")
str_split(hs_directory$location, "\\(")[1]
library(tidycensus)
library(tidyverse)
library(sf)
library(data.table)
options(tigris_use_cache = TRUE)
census_api_key("19609eb52d1c1d8a6000e796ad5ee4027040605f", overwrite = TRUE, install = TRUE) # to get your own data, you need a Census API key (https://walker-data.com/tidycensus/articles/basic-usage.html)
v19 <-load_variables(2019, "acs5", cache = TRUE)
highschool_vars <- v19 %>% filter(str_detect(label, "\\shigh school\\s"))
homeownership_vars <- v19 %>% filter(str_detect(label, "\\sownership\\s"))
v19 %>% filter(str_detect(label, "\\sownership\\s"))
v19 %>% filter(str_detect(label, "own"))
homeownership_vars <- v19 %>% filter(str_detect(label, "owner"))
View(homeownership_vars)
homeownership_vars <- v19 %>% filter(str_detect(label, "rent"))
View(homeownership_vars)
homeownership_vars <- v19 %>% filter(str_detect(label, "\\srent\\s"))
View(homeownership_vars)
rent_vars <- v19 %>% filter(str_detect(label, "\\srent\\s"))
homeownership_vars <- v19 %>% filter(str_detect(label, "\\shomeownership\\s"))
holc <- st_read('shp_plan_historic_holc_appraisal')
holc <- st_read('shp_plan_historic_holc_appraisal')
View(holc)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warnings=FALSE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf) #install.packages('sf')
library(spdep) #install.packages('spdep')
library(patchwork)
library(viridis)
library(tidycensus)
library(tidygeocoder)
library(dplyr)
library(googlesheets4)
library(readr)
library(tidyr)
library(gganimate)
library(gifski)
library(transformr)
# Load company data
sf_companies_long <- read_csv("sf_companies.csv")
# Load bay area data from 2009 to 2019
load('CapstoneData.RData')
# Animation
p1 <- bay_area_data_2009_2019_acs5_data %>%
filter(!is.na(HouseValueE)) %>%
ggplot() +
geom_sf(aes(fill = HouseValueE, group=year), size = 0) +
scale_fill_viridis_c() +
scale_size(range = c(2, 12)) +
labs(title = 'Year: {floor(frame_time)}', subtitle = 'Median House Prices across the Silicon Valley and Neighboring Areas') +
theme_void() +
transition_time(year)
animate(p1, duration = 20)
anim_save("house_price_animation.gif")
# Filter years before 2020
sf_companies_long <- sf_companies_long %>%
filter(year < 2020) # keep data from 2009 to 2019
sf_companies_with_coordinates <- sf_companies_long %>%
geocode(Address)
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5_data)
## Calculating growth for companies by EBITDA
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
tract_dataset <- bay_area_data_2009_2019_acs5_data %>% filter(year == 2019) %>% select(GEOID, geometry)
## Find total change % in EBITDA per census tract
### Join the companies and the census tracts that lie within the companies' 2000m radius
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
## Only keep the census tracts that have any intersection with the companies
tract_dataset_with_company_info <- tract_data_with_company_name %>%
group_by(GEOID, year) %>%
summarize(aggregate_EBITDA = sum(Yearly_EBITDA_million, na.rm=TRUE),
aggregate_past_EBITDA = sum(PreviousYearEBITDA, na.rm=TRUE),
EBITDA_growth = ((aggregate_EBITDA-aggregate_past_EBITDA)/aggregate_past_EBITDA)) %>%
ungroup() %>%
filter(!is.na(year))
## This line of code is changing the value for meanEPS when it has no input (from NaN to NA), weird, it gives 2009 EBITDA lagged values
tract_dataset_with_company_info$EBITDA_growth[is.nan(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.infinite(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.na(tract_dataset_with_company_info$EBITDA_growth)] = 0
tract_dataset_with_company_info$year = as.numeric(tract_dataset_with_company_info$year)
## Assigning growth rate with growth segment
tract_dataset_with_company_info <- tract_dataset_with_company_info  %>%
mutate(segment = case_when(
EBITDA_growth >= 0.5 ~ "High Growth",
EBITDA_growth >= 0.2 & EBITDA_growth < 0.5 ~ "Medium Growth",
EBITDA_growth > 0 & EBITDA_growth < 0.2 ~ "Low Growth",
EBITDA_growth <= 0 ~ "Low Growth",
TRUE ~ as.character(EBITDA_growth)
))
## Create a distinct list of segment corresponding to which GEOID and year to merge with the larger data
county_growth_assignment <- tract_dataset_with_company_info %>%
select(GEOID, segment, year) %>%
distinct() %>%
arrange(GEOID) %>%
st_drop_geometry()
longitudinal_data <- left_join(bay_area_data_2009_2019_acs5_data, county_growth_assignment, by = c("GEOID","year"))
longitudinal_data$county <- strsplit(longitudinal_data$NAME, ',') %>% sapply(.,function(v) trimws(v[2]))
longitudinal_data$segment[is.na(longitudinal_data$segment)] = "Control"
# Visualization for overall plot pre-GEE (have to include)
average_median_housing_value <- longitudinal_data %>%
st_drop_geometry() %>%
group_by(year, segment) %>%
summarise(avg_median_house_value = mean(HouseValueE/100000, na.rm = TRUE))
average_median_housing_value %>%
ggplot(aes(x=year, y=avg_median_house_value, color = segment)) +
geom_line() +
geom_vline(aes(xintercept = 2014), linetype = "dotted", color = "black", size = 0.5)+
theme_classic()+
labs(title= "Median House Price for Different Growth Segments between 2009 and 2019", x = "Year", y = "Median House Price (in $100K)", color = "Growth Segment")+
scale_color_viridis_d(alpha = 1)
correlation_chart <- longitudinal_data %>%
select(HouseValueE, IncomeE, PopE, AgeE, HouseholdSizeE, NumHouseE, `BirthPlace_Foreign born:`, `BirthPlace_Born in state of res`, Industry_Whole, Industry_Infor, Industry_Finan, Industry_Profe, Industry_Other,`Race_White alone`, `Race_Black or African American`, AREA) %>%
st_drop_geometry() %>%
cor(.,use='complete.obs')
# median_house_value_by_county <- longitudinal_data %>% group_by(county, year) %>% summarise(med_house_price = median(HouseValueE, na.rm = TRUE))
# install.packages('geeM')
library(geeM)
# GEE model
gee_mod <- longitudinal_data %>%
st_drop_geometry() %>%
drop_na(HouseValueE, year, segment, HouseholdSizeE, IncomeE, `BirthPlace_Born in state of res`, `Race_White alone`, county) %>%
mutate(outcome = HouseValueE/100000,
IncomeE = IncomeE/10000) %>% # in hundreds of thousands
geem(outcome ~ year*I(year > 2014)*segment + HouseholdSizeE + IncomeE + `BirthPlace_Born in state of res`+ `Race_White alone`+ county, data = ., id = GEOID, corstr = 'ar1') # AR1 working correlation
gee_mod %>% summary()
b = gee_mod$beta
length(b)
W = gee_mod$var
(L = matrix(c(rep(0,15), 1, rep(0,9),
rep(0,16), 1, rep(0,8),
rep(0,17), 1, rep(0,7),
rep(0,18), 1, rep(0,6),
rep(0,19), 1, rep(0,5),
rep(0,20), 1, rep(0,4),
rep(0,21), 1, rep(0,3),
rep(0,22), 1, rep(0,2),
rep(0,23), 1, rep(0,1),
rep(0,24), 1, rep(0,0)), nrow=10,byrow = TRUE)) #L for Lb
## Hypothesis Testing
w2 <- as.numeric( t(L%*%b) %*% solve(L %*% W %*% t(L))%*% (L%*%b)) ## should be approximately chi squared
1 - pchisq(w2, df = nrow(L)) #p-value
spatial_data_no_empty_geo_2018 <- longitudinal_data %>%
drop_na(HouseValueE, year, segment, HouseholdSizeE, IncomeE, `BirthPlace_Born in state of res`, `Race_White alone`, county) %>%
mutate(predicted = predict(gee_mod), residual = HouseValueE/100000 - predicted) %>%
filter(year == 2018) %>%
filter(!st_is_empty(.))
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo_2018), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
spdep::moran.test(spatial_data_no_empty_geo_2018$residual, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo_2018$residual, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
#Map residuals
longitudinal_data %>%
drop_na(HouseValueE, year, segment, HouseholdSizeE, IncomeE, `BirthPlace_Born in state of res`, `Race_White alone`, county) %>%
mutate(predicted = predict(gee_mod), residual = HouseValueE/100000 - predicted) %>%
filter(year == 2018) %>%
ggplot() +
geom_sf(aes(fill = residual),size=0)+
scale_fill_gradient2(mid = "white",
high = "red", low = "blue") +
labs(title = "Residuals resulted from GEE Model's predictions", fill = "Prediction Errors (in $100K)") +
theme_void()
nb_KNN_net
Wb
mp
bay_area_centroids
KNN
Wb
nb_KNN_net
library(tidycensus)
library(tidyverse)
library(sf)
library(data.table)
holc <- st_read('shp_plan_historic_holc_appraisal')
View(holc)
holc %>%
ggplot(aes(fill=HSG_SCALE), size=0) +
geom_sf()
holc %>% isna(geometry)
(geometry)
holc %>% is.na(geometry)
holc %>% is.na(geometry)
holc %>% is.na(geometry)
holc %>%
ggplot(aes(fill=HSG_SCALE), size=0) +
geom_sf()
holc %>%
ggplot(aes(fill=HSG_SCALE), size=0) +
geom_sf() +
scale_size(range = c(2, 12)) +
theme_void()
holc %>%
ggplot(aes(fill=HSG_SCALE), size=0) +
geom_sf() +
scale_size(range = c(2, 12)) +
labs(fill='Area Type') +
theme_void()
options(tigris_use_cache = TRUE)
census_api_key("19609eb52d1c1d8a6000e796ad5ee4027040605f", overwrite = TRUE, install = TRUE) # to get your own data, you need a Census API key (https://walker-data.com/tidycensus/articles/basic-usage.html)
v19 <-load_variables(2019, "acs5", cache = TRUE)
white_var <- v19 %>% filter(str_detectt(label, "\\white\\s"))
white_var <- v19 %>% filter(str_detect(label, "\\white\\s"))
View(white_var)
black_var <- v19 %>% filter(str_detect(label, "\\black\\s"))
View(black_var)
white_var <- v19 %>% filter(str_detect(label, "\\swhite\\s"))
black_var <- v19 %>% filter(str_detect(label, "\\sblack\\s"))
white_var <- v19 %>% filter(str_detect(label, "white"))
white_var <- v19 %>% filter(str_detect(label, "white"))
white_var <- v19 %>% filter(str_detect(label, "\\swhite\\s"))
white_var <- v19 %>% filter(str_detect(label, "\\white\\s"))
black_var <- v19 %>% filter(str_detect(label, "\\black\\s"))
black_var <- v19 %>% filter(str_detect(label, "\\sblack\\s"))
white_var <- v19 %>% filter(str_detect(label, "white\\s"))
white_var <- v19 %>% filter(str_detect(label, "white"))
white_var <- v19 %>% filter(str_detect(lower(label), "white"))
black_var <- v19 %>% filter(str_detect(label, "black"))
black_var <- v19 %>% filter(str_detect(label, "Black"))
black_var <- v19 %>% filter(str_detect(tolower(label), "black"))
View(black_var)
race_var <- v19 %>% filter(str_detect(tolower(conceot), "race"))
race_var <- v19 %>% filter(str_detect(tolower(conceot), "race"))
race_var <- v19 %>% filter(str_detect(tolower(concept), "race"))
View(race_var)
race_var <- v19 %>% filter(str_detect(tolower(concept), "^race"))
View(race_var)
VARS <- c(Income = "B19013_001", Population = 'B01003_001', Age = "B01002_001", HouseValue = "B25077_001", HouseholdSize = "B25010_001", NumHouse = "B25003_001", NumWithHighSchoolDiploma = "B15003_017", WhitePopulation = "B02001_002")
mn_data_2019 <- get_acs(state = "MN", geography = "tract",
variables = VARS, geometry = TRUE, output='wide', survey = "acs5", year = 2019)
View(mn_data_2019)
mn_data_2019 <- get_acs(state = "MN", geography = "tract",
variables = VARS, geometry = TRUE, output='wide', survey = "acs5", year = 2019)
holc_mn_data <- st_join(mn_data_2017, holc)
holc_mn_data <- st_join(mn_data_2019, holc)
st_crs(holc) = st_crs(mn_data_2019)
holc_mn_data <- st_join(mn_data_2019, holc)
st_crs(holc) = st_crs(mn_data_2019)
holc <- st_read('shp_plan_historic_holc_appraisal')
mn_data_2019
holc_mn_data <- st_join(mn_data_2019, holc)
st_crs(holc) = st_crs(mn_data_2019)
st_transform(holc, st_crs(mn_data_2019))
holc <- st_read('shp_plan_historic_holc_appraisal')
st_transform(holc, st_crs(mn_data_2019))
holc_mn_data <- st_join(mn_data_2019, holc)
holc <- st_read('shp_plan_historic_holc_appraisal')
holc <- st_transform(holc, st_crs(mn_data_2019))
holc_mn_data <- st_join(mn_data_2019, holc)
holc1 <- st_make_valid(holc)
holc_mn_data <- st_join(mn_data_2019, holc1)
View(holc_mn_data)
mn_data_2019 <- get_acs(state = "MN", geography = "tract",
variables = VARS, geometry = TRUE, output='wide', survey = "acs5", year = 2019) %>%
select(- ends_with(M))
mn_data_2019 <- get_acs(state = "MN", geography = "tract",
variables = VARS, geometry = TRUE, output='wide', survey = "acs5", year = 2019)
holc <- st_read('shp_plan_historic_holc_appraisal')
mn_data_2019 <- mn_data_2019 %>%
select(- ends_with(M))
mn_data_2019 <- mn_data_2019 %>%
select(- ends_with("M"))
holc <- st_transform(holc, st_crs(mn_data_2019))
holc1 <- st_make_valid(holc)
holc_mn_data <- st_join(mn_data_2019, holc1)
holc %>%
ggplot(aes(fill=HSG_SCALE), size=0) +
geom_sf() +
scale_size(range = c(2, 12)) +
labs(fill='Area Type') +
theme_void()
View(holc_mn_data)
race_white_per_area <- holc_mn_data %>%
group_by(HSG_SCALE) %>%
summarise(avg_race_white_pct = mean(WhitePopulationE/PopulationE))
View(race_white_per_area)
race_white_per_area <- holc_mn_data %>%
group_by(HSG_SCALE) %>%
summarise(avg_race_white_pct = mean(WhitePopulationE/PopulationE, na.rm = TRUE))
View(race_white_per_area)
View(race_var)
VARS <- c(Income = "B19013_001", Population = 'B01003_001', Age = "B01002_001", HouseValue = "B25077_001", HouseholdSize = "B25010_001", NumHouse = "B25003_001", NumWithHighSchoolDiploma = "B15003_017", WhitePopulation = "B02001_002", BlackPopulation = "B02001_003", NativePopulation = "B02001_004", AsianPopulation = "B02001_005", TwoOrMoreRaces = "B02001_008") # We can get more variables if we need
mn_data_2019 <- get_acs(state = "MN", geography = "tract",
variables = VARS, geometry = TRUE, output='wide', survey = "acs5", year = 2019)
holc <- st_read('shp_plan_historic_holc_appraisal')
mn_data_2019 <- mn_data_2019 %>%
select(- ends_with("M"))
holc <- st_transform(holc, st_crs(mn_data_2019))
holc1 <- st_make_valid(holc)
holc_mn_data <- st_join(mn_data_2019, holc1)
View(holc_mn_data)
race_pct_by_area_cat <- holc_mn_data %>%
group_by(HSG_SCALE) %>%
summarise(avg_race_white_pct = mean(WhitePopulationE/PopulationE, na.rm = TRUE),
avg_race_black_pct = mean(BlackPopulationE/PopulationE, na.rm = TRUE),
avg_race_native_pct = mean(NativePopulationE/PopulationE, na.rm = TRUE),
avg_race_asian_pct = mean(AsianPopulationE/PopulationE, na.rm = TRUE),
avg_mix_race_pct = mean(TwoOrMoreRacesE/PopulationE, na.rm = TRUE))
View(race_pct_by_area_cat)
race_pct_by_area_cat_long <- race_pct_by_area_cat %>%
pivot_longer(cols=ends_with("pct"), names_to = "pct_type", values_to = "pct")
View(race_pct_by_area_cat_long)
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
theme_void()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = str_wrap(HSG_SCALE, width = 10)) +
theme_classic()
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 3)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
drop_na(HSG_SCALE) %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
drop_na(HSG_SCALE) %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
labs(x="Type of Area according to Home Owners Loan Corporation (HOLC)", y = "Proportion of Population", fill="Race Type") +
theme_classic()
viz
race_pct_by_area_cat <- holc_mn_data %>%
group_by(HSG_SCALE) %>%
summarise(`White Population` = mean(WhitePopulationE/PopulationE, na.rm = TRUE),
`Black Population` = mean(BlackPopulationE/PopulationE, na.rm = TRUE),
`Native Population` = mean(NativePopulationE/PopulationE, na.rm = TRUE),
`Asian Population` = mean(AsianPopulationE/PopulationE, na.rm = TRUE),
`Mix Race Population` = mean(TwoOrMoreRacesE/PopulationE, na.rm = TRUE))
race_pct_by_area_cat_long <- race_pct_by_area_cat %>%
pivot_longer(cols=ends_with("pct"), names_to = "pct_type", values_to = "pct")
race_pct_by_area_cat_long <- race_pct_by_area_cat %>%
pivot_longer(cols=ends_with("Population"), names_to = "pct_type", values_to = "pct")
viz <- race_pct_by_area_cat_long %>%
drop_na(HSG_SCALE) %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
labs(x="Type of Area according to Home Owners Loan Corporation (HOLC)", y = "Proportion of Population", fill="Race Type") +
theme_classic()
viz
viz <- race_pct_by_area_cat_long %>%
drop_na(HSG_SCALE) %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col(position = "dodge") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
labs(x="Type of Area according to Home Owners Loan Corporation (HOLC)", y = "Proportion of Population", fill="Race Type") +
theme_classic()
viz
View(holc_mn_data)
area_size <- holc_mn_data %>%
group_by(HSG_SCALE) %>%
summarise(size = sum(Shape_Area)) %>%
arrange(desc(size))
View(area_size)
viz <- race_pct_by_area_cat_long %>%
filter(! HSG_SCALE %in% c(NA, 'Uncertain')) %>%
ggplot(aes(x=HSG_SCALE, y=pct, fill=pct_type)) +
geom_col(position = "dodge") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 4)) +
labs(x="Type of Area according to Home Owners Loan Corporation (HOLC)", y = "Proportion of Population", fill="Race Type") +
theme_classic()
viz
manhattan <- st_read('NYManhattan1937')
View(manhattan)
View(manhattan)
